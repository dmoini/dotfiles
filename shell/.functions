#!/bin/bash

# `code` with no arguments opens the current directory, otherwise opens the given location
c() {
    if [ $# -eq 0 ]; then
        code .;
    else
        code "$@";
    fi;
}

# Extracs any file type
extract() {
    if [ -z "$1" ]; then
        # display usage if no parameters given
        echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
        echo "       extract <path/file_name_1.ext> [path/file_name_2.ext] [path/file_name_3.ext]"
        return 1
    else
        for n in $@
        do
            if [ -f "$n" ] ; then
                case "${n%,}" in
                    *.tar.bz2|*.tar.gz|*.tar.xz|*.tbz2|*.tgz|*.txz|*.tar) 
                                tar xvf "$n"       ;;
                    *.lzma)     unlzma ./"$n"      ;;
                    *.bz2)      bunzip2 ./"$n"     ;;
                    *.rar)      unrar x -ad ./"$n" ;;
                    *.gz)       gunzip ./"$n"      ;;
                    *.zip)      unzip ./"$n"       ;;
                    *.z)        uncompress ./"$n"  ;;
                    *.7z|*.arj|*.cab|*.chm|*.deb|*.dmg|*.iso|*.lzh|*.msi|*.rpm|*.udf|*.wim|*.xar)
                                7z x ./"$n"        ;;
                    *.xz)       unxz ./"$n"        ;;
                    *.exe)      cabextract ./"$n"  ;;
                    *)
                                echo "extract: '$n' - unknown archive method"
                                return 1
                                ;;
                esac
            else
                echo "'$n' - file does not exist"
                return 1
            fi
        done
    fi
}

# Determine size of a file or total size of a directory
fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh;
    else
        local arg=-sh;
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@";
    else
        # du $arg .[^.]* ./*;
    du $arg *;
    fi;
}

# Git commit ammend with last commit message
gcalcm() {
    last_commit_message="$(echo $(glcm))"
    gca "${last_commit_message}"
}

# Delete branch locally and remotely
gbdlr() {
    git branch --delete $1;
    git push origin :$1;
}

# Git log find by commit message
glf() { 
    git log --all --grep="$1";
}

# Track all remote branches
gtarb() {
    for i in `git branch -a | grep remote | grep -v HEAD | grep -v master`; do 
        git branch --track ${i#remotes/origin/} $i;
    done
}

# Lists globally installed npm packages
npm-global-packages() {
    npm list -g --parseable --depth=0 | sed '1d' | awk '{gsub(/\/.*\//,"",$1); print}'
}

# `o` with no arguments opens the current directory, otherwise opens the given location
o() {
    if [ $# -eq 0 ]; then
        open .;
    else
        open "$@";
    fi;
}

# Allows user to install global pip package
syspip() {
    PIP_REQUIRE_VIRTUALENV=""
    pip3 "$@"
    PIP_REQUIRE_VIRTUALENV=true
}
