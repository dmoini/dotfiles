#!/bin/bash

# Copies password from BitWarden to clipboard
bw-passclip() {
    bw get password "$1" | pbcopy
}

# Opens current directory in VSCode with no arguments, otherwise opens the given location
c() {
    if [ $# -eq 0 ]; then
        code .
    else
        code "$@"
    fi
}

# Extracs any file type
extract() {
    if [ -z "$1" ]; then
        # display usage if no parameters given
        echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
        echo "       extract <path/file_name_1.ext> [path/file_name_2.ext] [path/file_name_3.ext]"
        return 1
    else
        for n in "$@"; do
            if [ -f "$n" ] ; then
                case "${n%,}" in
                    *.tar.bz2 | *.tar.gz | *.tar.xz | *.tbz2 | *.tgz | *.txz | *.tar) 
                                tar xvf "$n"       ;;
                    *.lzma)     unlzma ./"$n"      ;;
                    *.bz2)      bunzip2 ./"$n"     ;;
                    *.rar)      unrar x -ad ./"$n" ;;
                    *.gz)       gunzip ./"$n"      ;;
                    *.zip)      unzip ./"$n"       ;;
                    *.z)        uncompress ./"$n"  ;;
                    *.7z | *.arj | *.cab | *.chm | *.deb | *.dmg | *.iso | *.lzh | *.msi | *.rpm | *.udf | *.wim | *.xar)
                                7z x ./"$n"        ;;
                    *.xz)       unxz ./"$n"        ;;
                    *.exe)      cabextract ./"$n"  ;;
                    *)
                                echo "extract: '$n' - unknown archive method"
                                return 1
                                ;;
                esac
            else
                echo "'$n' - file does not exist"
                return 1
            fi
        done
    fi
}

# Shorthand function for `find`
f() {
    find . -name "$1" 2>/dev/null | grep -v "Permission denied"
}

# Determine size of a file or total size of a directory
fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh
    else
        local arg=-sh
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@"
    else
        du $arg *
    fi;
}

# Renames branch from old_branch to new_branch
# https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git
gbrename() {
	if [[ -z "$1" || -z "$2" ]]; then
		echo "Usage: $0 old_branch new_branch"
		return 1
	fi
    git branch -m "$1" "$2"
    if git push origin :"$1"; then
        git push --set-upstream origin "$2"
    fi
}

# Delete branch locally and remotely
gbdlr() {
    if [ -z "$1" ]; then
        echo "Usage: $0 <branch-name>"
        return 1
    fi
    printf "Confirm deletion of local and remote branch \"$1\" [y/n]: "
    read -r opt
    if [ "$opt" != "y" ]; then
        return 1
    fi
    git branch -D "$1"
    git push origin :"$1"
}

# Git checkout main or master
gcom() {
    if [[ -n $(git branch --list main) ]]; then
        git checkout main
    else
        git checkout master
    fi
}

# Git log find by commit message
glf() { 
    git log --all --grep="$1"
}

# Git merge main or master
gmom() {
    if [[ -n $(git branch --list main) ]]; then
        git merge origin/main
    else
        git merge origin/master
    fi
}

# Track all remote branches
gtarb() {
    for i in $(git branch -a | grep remote | grep -v HEAD | grep -v master); do
        git branch --track "${i#remotes/origin/}" "$i"
    done
}

# Opens current directory in IntelliJ IDEA with no arguments, otherwise opens the given location
i() {
    if [ $# -eq 0 ]; then
        open -na "IntelliJ IDEA.app" --args .
    else
        open -na "IntelliJ IDEA.app" --args "$@"
    fi
}

# Lists globally installed npm packages
npm-global-packages() {
    npm list -g --parseable --depth=0 | sed '1d' | awk '{gsub(/\/.*\//,"",$1); print}'
}

# Returns number of files/folders in a folder
numfiles() {
    ls "$1" | wc -l
}

# Opens the current directory with no arguments, otherwise opens the given location
o() {
    if [ $# -eq 0 ]; then
        open .
    else
        open "$@"
    fi;
}

# Allows user to install global pip package
syspip() {
    export PIP_REQUIRE_VIRTUALENV=""
    pip3 "$@"
    export PIP_REQUIRE_VIRTUALENV=true
}
