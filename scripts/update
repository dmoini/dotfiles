#!/bin/bash

source ~/.exports
source ~/.functions

LCYAN="\033[0;96m"
NC="\033[0m"

####################
# Helper functions #
####################

updateEcho() {
    echo -e "${LCYAN}Updating $1...${NC}"
}

commandNotFound() {
    for cmd in "$@"; do
        if ! which "$cmd" &>/dev/null; then
            echo -e "$cmd is not found\n"
            return 0
        fi
    done
    return 1
}

directoryNotFound() {
    for dir in "$@"; do
        if ! [[ -d "$dir" ]]; then
            echo -e "$dir is not found\n"
            return 0
        fi
    done
    return 1
}

isNotFound() {
    if [ "$1" == "-c" ]; then
        if commandNotFound "${@:2}"; then return 0; fi 
    elif [ "$1" == "-d" ]; then
        if directoryNotFound "${@:2}"; then return 0; fi
    else
        echo "Usage for commands: isNotFound -c [command1] [command2]..."
        echo "Usage for directories: isNotFound -d [directory1] [directory2]..."
    fi
    return 1
}

####################
# Update functions #
####################

updateDotfiles() {
    if isNotFound -c git; then return; fi

    updateEcho "Dotfiles"
    sync_dotfiles
}

updateHomebrew() {
    if isNotFound -c brew; then return; fi

    updateEcho "Homebrew"
    brew update
    brew upgrade
    brew cleanup -s
}

updateLocalGitHubRepositories() {
    if isNotFound -c git hub; then return; fi

    declare -a paths=("$HOME/code")

    updateEcho "GitHub Repositories"
    for path in "${paths[@]}"; do
        gitup -p "$path"
    done
}

updateMacOS() {
    updateEcho "macOS"
    softwareupdate -i -a
}

updateMas() {
    if isNotFound -c mas; then return; fi

    updateEcho "App Store Applications"
    mas outdated
    mas upgrade
}

# TODO: check if nvm is found (isNotFound -c nvm does not work since `nvm` is a function)
updateNode() {
    if isNotFound -c node; then return; fi

    updateEcho "node"
    node_version_regex="\d{1,2}\.\d{1,2}\.\d{1,2}"
    current_node_version=$(node --version | grep -Eo $node_version_regex)
    latest_node_version=$(nvm ls-remote | tail -n1 | grep -Eo $node_version_regex)
    if [[ "$current_node_version" == "$latest_node_version" ]]; then
        echo "Latest Node version is installed"
        return
    fi
    echo -e "Updating Node from v$current_node_version to v$latest_node_version and reinstalling global npm packages...\n"

    nvm install "$latest_node_version"
    nvm reinstall-packages "$current_node_version"
    nvm uninstall "$current_node_version"
    nvm alias default "$latest_node_version"
}

updateNPM() {
    if isNotFound -c npm; then return; fi

    updateEcho "NPM"
    if [ "$(npm show npm version)" == "$(npm -v)" ]; then
        echo -e "Latest npm version is installed\n"
    else
        nvm install-latest-npm
        echo
    fi

    updateEcho "NPM Packages"
    outdated_npm_packages=$(npm outdated -g --depth=0)
    if [ -z "$outdated_npm_packages" ]; then
        echo "Global npm packages are up to date"
    else
        echo -e "$outdated_npm_packages\n"
        npm update -g
    fi
}

updateOhMyZsh() {
    if isNotFound -d "$HOME/.oh-my-zsh"; then return; fi

    updateEcho "Oh My Zsh"
    env ZSH="$ZSH" sh "$ZSH/tools/upgrade.sh"
}

updatePip() {
    if isNotFound -c pip pip3; then return; fi

    updateEcho "Pip"
    syspip install -U pip
    echo

    updateEcho "Pip Packages"
    outdated_pip_packages=$(syspip list --outdated)
    if [ -z "$outdated_pip_packages" ]; then
        echo "Global pip packages are up to date"
    else
        echo -e "$outdated_pip_packages\n"
        # shellcheck disable=SC2046
        syspip install -U $(syspip list --outdated 2>/dev/null | sed 1,2d | awk '{printf $1 " " }' | sed 's/\ $//')
    fi
}

main() {
    declare -a updateFunctions=(
        updateMacOS
        updateHomebrew
        updateLocalGitHubRepositories
        updateMas
        updateNode
        updateNPM
        updatePip
        updateOhMyZsh
        updateDotfiles
    )

    for function in "${updateFunctions[@]}"; do
        "$function"
        echo
    done
    nyan
}

main
