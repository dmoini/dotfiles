#!/bin/bash

source ~/.exports
source ~/.functions

LCYAN='\033[0;96m'
NC='\033[0m'
CURR_DIR=$(pwd)

####################
# Helper functions #
####################

updateEcho() {
    echo -e "${LCYAN}Updating $1...${NC}"
}

commandNotFound() {
    for cmd in "$@"; do
        if ! which $cmd &>/dev/null; then
            echo -e "$cmd is not found\n"
            return 0
        fi
    done
    return 1
}

directoryNotFound() {
    for dir in "$@"; do
        if ! [[ -d $dir ]]; then
            echo -e "$dir is not found\n";
            return 0;
        fi
    done
    return 1
}

isNotFound() {
    if [ $1 == "-c" ]; then
        if commandNotFound "${@:2}"; then return 0; fi 
    elif [ $1 == "-d" ]; then
        if directoryNotFound "${@:2}"; then return 0; fi
    else
        echo "Usage for commands: isNotFound -c [command1] [command2]..."
        echo "Usage for directories: isNotFound -d [directory1] [directory2]..."
    fi
    return 1
}

####################
# Update functions #
####################

updateDotfiles() {
    if isNotFound -c git; then return; fi

    updateEcho "Dotfiles"
    sync_dotfiles
    echo
}

updateHomebrew() {
    if isNotFound -c brew; then return; fi

    updateEcho "Homebrew"
    brew update
    brew upgrade
    brew cleanup -s
    echo
}

updateLocalGitHubRepositories() {
    if isNotFound -c git hub; then return; fi

    updateEcho "GitHub Repositories"
    update_git_repos
}

updateMacOS() {
    updateEcho "macOS"
    softwareupdate -i -a
    echo
}

updateMas() {
    if isNotFound -c mas; then return; fi

    updateEcho "App Store Applications"
    mas outdated
    mas upgrade
    echo
}

# TODO: check if nvm is found (isNotFound -c nvm does not work)
updateNode() {
    if isNotFound -c node; then return; fi

    updateEcho "Node"
    node_version_regex="\d{1,2}\.\d{1,2}\.\d{1,2}"
    current_node_version=$(node --version | egrep -o $node_version_regex)
    latest_node_version=$(nvm ls-remote | tail -n1 | egrep -o $node_version_regex)
    if [[ "$current_node_version" == "$latest_node_version" ]]; then
        echo -e "Latest Node version is installed\n"
        return
    fi
    echo "Updating Node to v$latest_node_version and reinstalling global npm packages..."

    nvm install $latest_node_version
    nvm use $latest_node_version
    nvm reinstall-packages $current_node_version
    nvm uninstall $current_node_version
    nvm alias default $latest_node_version
    echo
}

updateNPM() {
    if isNotFound -c npm; then return; fi

    updateEcho "NPM"
    nvm install-latest-npm
    echo

    updateEcho "NPM Packages"
    outdated_npm_packages=$(npm outdated -g --depth=0)
    if [ -z $outdated_npm_packages ]; then
        echo "Global npm packages are up to date"
    else
        echo -e "$outdated_npm_packages\n"
        npm update -g
    fi
    echo
}

updatePip() {
    if isNotFound -c pip pip3; then return; fi

    updateEcho "Pip"
    syspip install -U pip
    echo

    updateEcho "Pip Packages"
    outdated_pip_packages=$(syspip list --outdated)
    if [ -z $outdated_pip_packages ]; then
        echo "Global pip packages are up to date"
    else
        echo -e "$outdated_pip_packages\n"
        syspip install -U $(syspip list --outdated 2>/dev/null | sed 1,2d | awk '{printf $1 " " }' | sed 's/\ $//')
    fi
    echo
}

updateOhMyZsh() {
    if isNotFound -d $HOME/.oh-my-zsh; then return; fi

    updateEcho "Oh My Zsh"
    env ZSH=$ZSH sh $ZSH/tools/upgrade.sh
}

updateAll() {
    updateHomebrew
    updateDotfiles
    updateLocalGitHubRepositories
    updateMacOS
    updateMas
    updateNode
    updateNPM
    updatePip
    updateOhMyZsh
    nyan
}

updateAll
